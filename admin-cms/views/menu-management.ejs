<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Menu Management - Admin CMS</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .menu-item-card {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            background: white;
        }
        .menu-item-image {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 4px;
        }
        .category-badge {
            background: #007bff;
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8em;
        }
        .dietary-symbols {
            font-size: 0.9em;
            color: #666;
        }
        .action-buttons {
            display: flex;
            gap: 5px;
        }
        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }
    </style>
</head>
<body class="bg-light">
    <%- include('partials/navbar') %>

    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2><i class="fas fa-utensils"></i> Menu Management</h2>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMenuItemModal">
                        <i class="fas fa-plus"></i> Add Menu Item
                    </button>
                </div>

                <!-- Category Filter -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Filter by Category</h5>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-outline-primary active" data-category="all">All</button>
                            <button type="button" class="btn btn-outline-primary" data-category="appetizers">Appetizers</button>
                            <button type="button" class="btn btn-outline-primary" data-category="main-courses">Main Courses</button>
                            <button type="button" class="btn btn-outline-primary" data-category="breads">Breads</button>
                            <button type="button" class="btn btn-outline-primary" data-category="desserts">Desserts</button>
                            <button type="button" class="btn btn-outline-primary" data-category="beverages">Beverages</button>
                        </div>
                    </div>
                </div>

                <!-- Menu Items List -->
                <div id="menuItemsList">
                    <!-- Menu items will be loaded here dynamically -->
                </div>
            </div>
        </div>
    </div>

    <!-- Add Menu Item Modal -->
    <div class="modal fade" id="addMenuItemModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Menu Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="addMenuItemForm">
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="itemName" class="form-label">Item Name *</label>
                                    <input type="text" class="form-control" id="itemName" name="name" required>
                                </div>
                                <div class="mb-3">
                                    <label for="itemDescription" class="form-label">Description</label>
                                    <textarea class="form-control" id="itemDescription" name="description" rows="3"></textarea>
                                </div>
                                <div class="mb-3">
                                    <label for="itemPrice" class="form-label">Price *</label>
                                    <input type="number" class="form-control" id="itemPrice" name="price" step="0.01" min="0" required>
                                </div>
                                <div class="mb-3">
                                    <label for="itemCategory" class="form-label">Category *</label>
                                    <select class="form-control" id="itemCategory" name="category" required>
                                        <option value="">Select Category</option>
                                        <option value="appetizers">Appetizers</option>
                                        <option value="main-courses">Main Courses</option>
                                        <option value="breads">Breads</option>
                                        <option value="desserts">Desserts</option>
                                        <option value="beverages">Beverages</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="itemImage" class="form-label">Image</label>
                                    <input type="file" class="form-control" id="itemImage" name="image" accept="image/*">
                                    <small class="text-muted">Upload a new image or leave empty to use placeholder</small>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Dietary Symbols</label>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="vegetarian" name="dietary" value="vegetarian">
                                        <label class="form-check-label" for="vegetarian">ü•¨ Vegetarian</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="vegan" name="dietary" value="vegan">
                                        <label class="form-check-label" for="vegan">üå± Vegan</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="glutenFree" name="dietary" value="gluten-free">
                                        <label class="form-check-label" for="glutenFree">üåæ Gluten-Free</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="spicy" name="dietary" value="spicy">
                                        <label class="form-check-label" for="spicy">üå∂Ô∏è Spicy</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="outOfStock" name="outOfStock">
                                        <label class="form-check-label" for="outOfStock">Out of Stock</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Add Item</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Menu Item Modal -->
    <div class="modal fade" id="editMenuItemModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Menu Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="editMenuItemForm">
                    <input type="hidden" id="editItemId" name="id">
                    <div class="modal-body">
                        <!-- Same form fields as add modal, but with edit- prefix -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="editItemName" class="form-label">Item Name *</label>
                                    <input type="text" class="form-control" id="editItemName" name="name" required>
                                </div>
                                <div class="mb-3">
                                    <label for="editItemDescription" class="form-label">Description</label>
                                    <textarea class="form-control" id="editItemDescription" name="description" rows="3"></textarea>
                                </div>
                                <div class="mb-3">
                                    <label for="editItemPrice" class="form-label">Price *</label>
                                    <input type="number" class="form-control" id="editItemPrice" name="price" step="0.01" min="0" required>
                                </div>
                                <div class="mb-3">
                                    <label for="editItemCategory" class="form-label">Category *</label>
                                    <select class="form-control" id="editItemCategory" name="category" required>
                                        <option value="">Select Category</option>
                                        <option value="appetizers">Appetizers</option>
                                        <option value="main-courses">Main Courses</option>
                                        <option value="breads">Breads</option>
                                        <option value="desserts">Desserts</option>
                                        <option value="beverages">Beverages</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="editItemImage" class="form-label">Image</label>
                                    <input type="file" class="form-control" id="editItemImage" name="image" accept="image/*">
                                    <small class="text-muted">Upload a new image or leave empty to keep current</small>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Dietary Symbols</label>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="editVegetarian" name="dietary" value="vegetarian">
                                        <label class="form-check-label" for="editVegetarian">ü•¨ Vegetarian</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="editVegan" name="dietary" value="vegan">
                                        <label class="form-check-label" for="editVegan">üå± Vegan</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="editGlutenFree" name="dietary" value="gluten-free">
                                        <label class="form-check-label" for="editGlutenFree">üåæ Gluten-Free</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="editSpicy" name="dietary" value="spicy">
                                        <label class="form-check-label" for="editSpicy">üå∂Ô∏è Spicy</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="editOutOfStock" name="outOfStock">
                                        <label class="form-check-label" for="editOutOfStock">Out of Stock</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Update Item</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Load menu items on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadMenuItems();
            setupEventListeners();
        });

        function loadMenuItems() {
            fetch('/api/menu-items')
                .then(response => response.json())
                .then(data => {
                    displayMenuItems(data);
                })
                .catch(error => {
                    console.error('Error loading menu items:', error);
                    document.getElementById('menuItemsList').innerHTML = 
                        '<div class="alert alert-danger">Error loading menu items</div>';
                });
        }

        function displayMenuItems(items) {
            const container = document.getElementById('menuItemsList');
            container.innerHTML = '';

            if (items.length === 0) {
                container.innerHTML = '<div class="alert alert-info">No menu items found</div>';
                return;
            }

            items.forEach(item => {
                const itemCard = createMenuItemCard(item);
                container.appendChild(itemCard);
            });
        }

        function createMenuItemCard(item) {
            const card = document.createElement('div');
            card.className = 'menu-item-card';
            card.innerHTML = `
                <div class="row align-items-center">
                    <div class="col-md-2">
                        <img src="${item.image || '/images/placeholder.png'}" alt="${item.name}" class="menu-item-image">
                    </div>
                    <div class="col-md-6">
                        <h5 class="mb-1">${item.name} ${item.outOfStock ? '<span class="badge bg-danger">Out of Stock</span>' : ''}</h5>
                        <p class="text-muted mb-1">${item.description || ''}</p>
                        <span class="category-badge">${item.category}</span>
                        <div class="dietary-symbols mt-1">
                            ${item.dietary ? item.dietary.join(' ') : ''}
                        </div>
                    </div>
                    <div class="col-md-2">
                        <strong class="text-primary">$${item.price}</strong>
                    </div>
                    <div class="col-md-2">
                        <div class="action-buttons">
                            <button class="btn btn-sm btn-outline-primary" onclick="editMenuItem('${item.id}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteMenuItem('${item.id}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `;
            return card;
        }

        function setupEventListeners() {
            // Category filter buttons
            document.querySelectorAll('[data-category]').forEach(button => {
                button.addEventListener('click', function() {
                    const category = this.dataset.category;
                    filterByCategory(category);
                    
                    // Update active button
                    document.querySelectorAll('[data-category]').forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                });
            });

            // Add menu item form
            document.getElementById('addMenuItemForm').addEventListener('submit', function(e) {
                e.preventDefault();
                addMenuItem();
            });

            // Edit menu item form
            document.getElementById('editMenuItemForm').addEventListener('submit', function(e) {
                e.preventDefault();
                updateMenuItem();
            });
        }

        function filterByCategory(category) {
            if (category === 'all') {
                loadMenuItems();
                return;
            }

            fetch(`/api/menu-items?category=${category}`)
                .then(response => response.json())
                .then(data => {
                    displayMenuItems(data);
                })
                .catch(error => {
                    console.error('Error filtering menu items:', error);
                });
        }

        function addMenuItem() {
            const formData = new FormData(document.getElementById('addMenuItemForm'));
            
            fetch('/api/menu-items', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('addMenuItemModal').querySelector('.btn-close').click();
                    document.getElementById('addMenuItemForm').reset();
                    loadMenuItems();
                    showAlert('Menu item added successfully!', 'success');
                } else {
                    showAlert('Error adding menu item: ' + data.message, 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Error adding menu item', 'danger');
            });
        }

        function editMenuItem(itemId) {
            fetch(`/api/menu-items/${itemId}`)
                .then(response => response.json())
                .then(item => {
                    // Populate edit form
                    document.getElementById('editItemId').value = item.id;
                    document.getElementById('editItemName').value = item.name;
                    document.getElementById('editItemDescription').value = item.description || '';
                    document.getElementById('editItemPrice').value = item.price;
                    document.getElementById('editItemCategory').value = item.category;
                    
                    // Set dietary checkboxes
                    const dietary = item.dietary || [];
                    document.getElementById('editVegetarian').checked = dietary.includes('vegetarian');
                    document.getElementById('editVegan').checked = dietary.includes('vegan');
                    document.getElementById('editGlutenFree').checked = dietary.includes('gluten-free');
                    document.getElementById('editSpicy').checked = dietary.includes('spicy');
                    
                    document.getElementById('editOutOfStock').checked = item.outOfStock || false;
                    
                    // Show modal
                    new bootstrap.Modal(document.getElementById('editMenuItemModal')).show();
                })
                .catch(error => {
                    console.error('Error loading item for edit:', error);
                    showAlert('Error loading item for edit', 'danger');
                });
        }

        function updateMenuItem() {
            const formData = new FormData(document.getElementById('editMenuItemForm'));
            const itemId = document.getElementById('editItemId').value;
            
            fetch(`/api/menu-items/${itemId}`, {
                method: 'PUT',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('editMenuItemModal').querySelector('.btn-close').click();
                    loadMenuItems();
                    showAlert('Menu item updated successfully!', 'success');
                } else {
                    showAlert('Error updating menu item: ' + data.message, 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Error updating menu item', 'danger');
            });
        }

        function deleteMenuItem(itemId) {
            if (confirm('Are you sure you want to delete this menu item?')) {
                fetch(`/api/menu-items/${itemId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        loadMenuItems();
                        showAlert('Menu item deleted successfully!', 'success');
                    } else {
                        showAlert('Error deleting menu item: ' + data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Error deleting menu item', 'danger');
                });
            }
        }

        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            const container = document.querySelector('.container');
            container.insertBefore(alertDiv, container.firstChild);
            
            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }
    </script>
</body>
</html> 